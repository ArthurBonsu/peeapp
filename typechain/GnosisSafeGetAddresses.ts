/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface GnosisSafeGetAddressesInterface extends utils.Interface {
  contractName: "GnosisSafeGetAddresses";
  functions: {
    "addresscheck(address)": FunctionFragment;
    "bytesToString(bytes)": FunctionFragment;
    "compare(string,string)": FunctionFragment;
    "equal(string,string)": FunctionFragment;
    "getSafeAddresses(address)": FunctionFragment;
    "gnosissafeownerhere()": FunctionFragment;
    "multiwalletlist(uint256,uint256)": FunctionFragment;
    "ownersafelist(uint256)": FunctionFragment;
    "ownersafestore(uint256)": FunctionFragment;
    "payfee(address,uint256)": FunctionFragment;
    "safeaddressarray(uint256)": FunctionFragment;
    "safeaddressesinfo(uint256,address)": FunctionFragment;
    "storeGnosisSafeAddress(address,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addresscheck",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "bytesToString",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "compare",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "equal",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSafeAddresses",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "gnosissafeownerhere",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiwalletlist",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownersafelist",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownersafestore",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payfee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeaddressarray",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeaddressesinfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "storeGnosisSafeAddress",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addresscheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bytesToString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "compare", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "equal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSafeAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gnosissafeownerhere",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiwalletlist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownersafelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownersafestore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payfee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeaddressarray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeaddressesinfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeGnosisSafeAddress",
    data: BytesLike
  ): Result;

  events: {
    "GnosisSafeAddress(address,string)": EventFragment;
    "getSafeAddressListEvent(string[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GnosisSafeAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "getSafeAddressListEvent"): EventFragment;
}

export type GnosisSafeAddressEvent = TypedEvent<
  [string, string],
  { _walletaddressevent: string; _safestringevent: string }
>;

export type GnosisSafeAddressEventFilter =
  TypedEventFilter<GnosisSafeAddressEvent>;

export type getSafeAddressListEventEvent = TypedEvent<
  [string[]],
  { safeaddresskey: string[] }
>;

export type getSafeAddressListEventEventFilter =
  TypedEventFilter<getSafeAddressListEventEvent>;

export interface GnosisSafeGetAddresses extends BaseContract {
  contractName: "GnosisSafeGetAddresses";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GnosisSafeGetAddressesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addresscheck(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    bytesToString(
      byteCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { stringData: string }>;

    compare(
      _a: string,
      _b: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    equal(
      _a: string,
      _b: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getSafeAddresses(
      walletaddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gnosissafeownerhere(overrides?: CallOverrides): Promise<[string]>;

    multiwalletlist(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ownersafelist(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { ownershere: string; safeaddressesstuff: string }
    >;

    ownersafestore(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { ownershere: string; safeaddressesstuff: string }
    >;

    payfee(
      sender: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeaddressarray(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    safeaddressesinfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    storeGnosisSafeAddress(
      walletaddress: string,
      safestring: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addresscheck(arg0: string, overrides?: CallOverrides): Promise<string>;

  bytesToString(
    byteCode: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  compare(
    _a: string,
    _b: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  equal(
    _a: string,
    _b: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getSafeAddresses(
    walletaddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gnosissafeownerhere(overrides?: CallOverrides): Promise<string>;

  multiwalletlist(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  ownersafelist(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string] & { ownershere: string; safeaddressesstuff: string }
  >;

  ownersafestore(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string] & { ownershere: string; safeaddressesstuff: string }
  >;

  payfee(
    sender: string,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeaddressarray(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  safeaddressesinfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  storeGnosisSafeAddress(
    walletaddress: string,
    safestring: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addresscheck(arg0: string, overrides?: CallOverrides): Promise<string>;

    bytesToString(
      byteCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    compare(
      _a: string,
      _b: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    equal(_a: string, _b: string, overrides?: CallOverrides): Promise<boolean>;

    getSafeAddresses(
      walletaddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    gnosissafeownerhere(overrides?: CallOverrides): Promise<string>;

    multiwalletlist(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    ownersafelist(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { ownershere: string; safeaddressesstuff: string }
    >;

    ownersafestore(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { ownershere: string; safeaddressesstuff: string }
    >;

    payfee(
      sender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    safeaddressarray(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    safeaddressesinfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    storeGnosisSafeAddress(
      walletaddress: string,
      safestring: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { _walletaddress: string; _safestring: string }
    >;
  };

  filters: {
    "GnosisSafeAddress(address,string)"(
      _walletaddressevent?: string | null,
      _safestringevent?: string | null
    ): GnosisSafeAddressEventFilter;
    GnosisSafeAddress(
      _walletaddressevent?: string | null,
      _safestringevent?: string | null
    ): GnosisSafeAddressEventFilter;

    "getSafeAddressListEvent(string[])"(
      safeaddresskey?: string[] | null
    ): getSafeAddressListEventEventFilter;
    getSafeAddressListEvent(
      safeaddresskey?: string[] | null
    ): getSafeAddressListEventEventFilter;
  };

  estimateGas: {
    addresscheck(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    bytesToString(
      byteCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compare(
      _a: string,
      _b: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    equal(
      _a: string,
      _b: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getSafeAddresses(
      walletaddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gnosissafeownerhere(overrides?: CallOverrides): Promise<BigNumber>;

    multiwalletlist(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownersafelist(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownersafestore(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payfee(
      sender: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeaddressarray(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeaddressesinfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    storeGnosisSafeAddress(
      walletaddress: string,
      safestring: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addresscheck(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bytesToString(
      byteCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    compare(
      _a: string,
      _b: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    equal(
      _a: string,
      _b: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getSafeAddresses(
      walletaddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gnosissafeownerhere(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiwalletlist(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownersafelist(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownersafestore(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payfee(
      sender: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeaddressarray(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeaddressesinfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    storeGnosisSafeAddress(
      walletaddress: string,
      safestring: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
