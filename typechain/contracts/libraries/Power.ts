/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface PowerInterface extends utils.Interface {
  functions: {
    "accurateWeights(uint256,uint256)": FunctionFragment;
    "balancedWeightsByStake(uint256,uint256,uint256,uint256,bool)": FunctionFragment;
    "initLambertArray()": FunctionFragment;
    "initMaxExpArray()": FunctionFragment;
    "normalizedWeights(uint256,uint256)": FunctionFragment;
    "power(uint256,uint256,uint32,uint32)": FunctionFragment;
    "safeFactors(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accurateWeights"
      | "balancedWeightsByStake"
      | "initLambertArray"
      | "initMaxExpArray"
      | "normalizedWeights"
      | "power"
      | "safeFactors"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accurateWeights",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balancedWeightsByStake",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initLambertArray",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initMaxExpArray",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "normalizedWeights",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "power",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeFactors",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "accurateWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balancedWeightsByStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initLambertArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initMaxExpArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "normalizedWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "power", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeFactors",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Power extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PowerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accurateWeights(
      _a: PromiseOrValue<BigNumberish>,
      _b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, number]>;

    balancedWeightsByStake(
      _hi: PromiseOrValue<BigNumberish>,
      _lo: PromiseOrValue<BigNumberish>,
      _tq: PromiseOrValue<BigNumberish>,
      _rp: PromiseOrValue<BigNumberish>,
      _lowerStake: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[number, number]>;

    initLambertArray(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initMaxExpArray(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    normalizedWeights(
      _a: PromiseOrValue<BigNumberish>,
      _b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, number]>;

    power(
      _baseN: PromiseOrValue<BigNumberish>,
      _baseD: PromiseOrValue<BigNumberish>,
      _expN: PromiseOrValue<BigNumberish>,
      _expD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number]>;

    safeFactors(
      _a: PromiseOrValue<BigNumberish>,
      _b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;
  };

  accurateWeights(
    _a: PromiseOrValue<BigNumberish>,
    _b: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number, number]>;

  balancedWeightsByStake(
    _hi: PromiseOrValue<BigNumberish>,
    _lo: PromiseOrValue<BigNumberish>,
    _tq: PromiseOrValue<BigNumberish>,
    _rp: PromiseOrValue<BigNumberish>,
    _lowerStake: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<[number, number]>;

  initLambertArray(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initMaxExpArray(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  normalizedWeights(
    _a: PromiseOrValue<BigNumberish>,
    _b: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number, number]>;

  power(
    _baseN: PromiseOrValue<BigNumberish>,
    _baseD: PromiseOrValue<BigNumberish>,
    _expN: PromiseOrValue<BigNumberish>,
    _expD: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number]>;

  safeFactors(
    _a: PromiseOrValue<BigNumberish>,
    _b: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  callStatic: {
    accurateWeights(
      _a: PromiseOrValue<BigNumberish>,
      _b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, number]>;

    balancedWeightsByStake(
      _hi: PromiseOrValue<BigNumberish>,
      _lo: PromiseOrValue<BigNumberish>,
      _tq: PromiseOrValue<BigNumberish>,
      _rp: PromiseOrValue<BigNumberish>,
      _lowerStake: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[number, number]>;

    initLambertArray(overrides?: CallOverrides): Promise<void>;

    initMaxExpArray(overrides?: CallOverrides): Promise<void>;

    normalizedWeights(
      _a: PromiseOrValue<BigNumberish>,
      _b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, number]>;

    power(
      _baseN: PromiseOrValue<BigNumberish>,
      _baseD: PromiseOrValue<BigNumberish>,
      _expN: PromiseOrValue<BigNumberish>,
      _expD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number]>;

    safeFactors(
      _a: PromiseOrValue<BigNumberish>,
      _b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;
  };

  filters: {};

  estimateGas: {
    accurateWeights(
      _a: PromiseOrValue<BigNumberish>,
      _b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balancedWeightsByStake(
      _hi: PromiseOrValue<BigNumberish>,
      _lo: PromiseOrValue<BigNumberish>,
      _tq: PromiseOrValue<BigNumberish>,
      _rp: PromiseOrValue<BigNumberish>,
      _lowerStake: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initLambertArray(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initMaxExpArray(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    normalizedWeights(
      _a: PromiseOrValue<BigNumberish>,
      _b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    power(
      _baseN: PromiseOrValue<BigNumberish>,
      _baseD: PromiseOrValue<BigNumberish>,
      _expN: PromiseOrValue<BigNumberish>,
      _expD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeFactors(
      _a: PromiseOrValue<BigNumberish>,
      _b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accurateWeights(
      _a: PromiseOrValue<BigNumberish>,
      _b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balancedWeightsByStake(
      _hi: PromiseOrValue<BigNumberish>,
      _lo: PromiseOrValue<BigNumberish>,
      _tq: PromiseOrValue<BigNumberish>,
      _rp: PromiseOrValue<BigNumberish>,
      _lowerStake: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initLambertArray(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initMaxExpArray(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    normalizedWeights(
      _a: PromiseOrValue<BigNumberish>,
      _b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    power(
      _baseN: PromiseOrValue<BigNumberish>,
      _baseD: PromiseOrValue<BigNumberish>,
      _expN: PromiseOrValue<BigNumberish>,
      _expD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeFactors(
      _a: PromiseOrValue<BigNumberish>,
      _b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
